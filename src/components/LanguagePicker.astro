---
import { languages } from '../i18n/ui';
import { getLangFromUrl, useTranslatedPath } from '../i18n/utils';
const lang = getLangFromUrl(Astro.url);
const translatePath = useTranslatedPath(lang);
---

<div class="language-picker">
  <button
    class="language-toggle"
    aria-label="Toggle language menu"
    aria-expanded="false"
  >
    <span class="current-lang">{languages[lang]}</span>
    <svg class="chevron" width="12" height="12" viewBox="0 0 12 12" fill="none">
      <path
        d="M3 4.5L6 7.5L9 4.5"
        stroke="currentColor"
        stroke-width="1.5"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </svg>
  </button>
  <ul class="language-menu">
    {
      Object.entries(languages).map(([langCode, label]) => (
        <li>
          <a
            href={translatePath('/', langCode)}
            class={langCode === lang ? 'active' : ''}
          >
            {label}
          </a>
        </li>
      ))
    }
  </ul>
</div>

<style>
  .language-picker {
    position: relative;
    display: inline-block;
  }

  .language-toggle {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: none;
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    color: var(--color-text);
    cursor: pointer;
    font-size: 0.9rem;
    transition: all 0.2s;
  }

  .language-toggle:hover {
    background: var(--color-accent);
    color: rgb(135, 135, 135);
    border-color: var(--color-accent);
  }

  .chevron {
    transition: transform 0.2s;
  }

  .language-toggle[aria-expanded='true'] .chevron {
    transform: rotate(180deg);
  }

  .language-menu {
    position: absolute;
    top: 100%;
    right: 0;
    margin-top: 0.25rem;
    padding: 0.25rem 0;
    background: white;
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    list-style: none;
    min-width: 100px;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.2s;
    z-index: 1000;
  }

  .language-picker:hover .language-menu,
  .language-toggle[aria-expanded='true'] + .language-menu {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .language-menu li {
    margin: 0;
  }

  .language-menu a {
    display: block;
    padding: 0.5rem 1rem;
    color: var(--color-text);
    text-decoration: none;
    transition: background-color 0.2s;
    font-size: 0.9rem;
    white-space: nowrap;
  }

  .language-menu a:hover {
    background: var(--color-accent);
    color: rgb(135, 135, 135);
  }

  .language-menu a.active {
    background: var(--color-accent);
    color: rgb(135, 135, 135);
    font-weight: 500;
  }

  @media (max-width: 768px) {
    .language-menu {
      right: auto;
      left: 0;
    }
  }
</style>

<script>
  // Add JavaScript for better accessibility
  const languageToggle = document.querySelector('.language-toggle');
  const languageMenu = document.querySelector('.language-menu');

  if (languageToggle && languageMenu) {
    languageToggle.addEventListener('click', () => {
      const isExpanded =
        languageToggle.getAttribute('aria-expanded') === 'true';
      languageToggle.setAttribute('aria-expanded', (!isExpanded).toString());
    });

    // Close menu when clicking outside
    document.addEventListener('click', e => {
      if (!languageToggle.contains(e.target as Node)) {
        languageToggle.setAttribute('aria-expanded', 'false');
      }
    });
  }
</script>
